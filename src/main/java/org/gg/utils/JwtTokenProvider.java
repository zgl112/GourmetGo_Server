package org.gg.utils;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.gg.model.User;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.*;

@Component
public class JwtTokenProvider {

    @Value("${jwt.secret}")
    private String jwtSecret;
    @Value("${jwt.expiration}")
    private long jwtExpirationInMs;

    public String generateToken(User user) {
        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + jwtExpirationInMs);

        Claims claims = Jwts.claims().setSubject(user.getUsername());
        claims.put("email", user.getEmail());
        claims.put("sub", user.getId());

        return Jwts.builder()
                .setClaims(claims)
                .setIssuedAt(now)
                .setExpiration(expiryDate)
                .signWith(SignatureAlgorithm.HS512, createKey(jwtSecret))
                .compact();
    }

    public UserDetails getUserDetailsFromToken(String token) {
        Claims claims = Jwts.parserBuilder().setSigningKey(createKey(jwtSecret)).build().parseClaimsJws(token).getBody();

        // Extract user details from claims
        String username = claims.get("username", String.class);

        // Create a UserDetails object
        return new User(null, null, null, username, null, null, null, null,
                null, null, null, null,null);
    }

    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder().setSigningKey(createKey(jwtSecret)).build().parseClaimsJws(token);
            return true;
        } catch (Exception e) {
            // Token validation failed
            return false;
        }
    }

    public Key createKey(String jwtSecret){
        // Replace secret key with a secure one generated by the Keys class
        return Keys.hmacShaKeyFor(jwtSecret.getBytes());
    }
}